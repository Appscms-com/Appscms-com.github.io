{"h1":"Android transition support  libraries","title":"List of all Android transition support  libraries for use in your project","meta":"See collection of all Android transition support  libraries, filter by license, modified date, languages, and select best for your usecase.","repoList":[{"name":"OmegaRoundingImageView","language":"Java","description":"RoundingImageView that supports any transitions","fullName":"Omega-R\/OmegaRoundingImageView","updatedAt":"2020-03-07T15:52:29Z","gitUrl":"https:\/\/github.com\/Omega-R\/OmegaRoundingImageView","license":"Apache License 2.0","forks":2,"stargazersCount":10},{"name":"Android-Scene-Transition","language":"Java","description":"This is attempt to backport Android's scene transition library into a support package.","fullName":"snard6\/Android-Scene-Transition","updatedAt":"2017-03-05T06:33:29Z","gitUrl":"https:\/\/github.com\/snard6\/Android-Scene-Transition","license":"Apache License 2.0","forks":1,"stargazersCount":12},{"name":"TransitionSupportLibrary","language":"Java","description":"Android \u4e00\u4e2a\u52a8\u753bTransitionSupportLibrary  Library","fullName":"haikuowuya\/TransitionSupportLibrary","updatedAt":"2018-07-24T08:58:43Z","gitUrl":"https:\/\/github.com\/haikuowuya\/TransitionSupportLibrary","license":null,"forks":1,"stargazersCount":2},{"name":"AndroidSupportLibrarySamples","language":"Java","description":"Samples for android support library. (AppLaunchChecker, activity transitions, fragment transitions, ...)","fullName":"asanchezyu\/AndroidSupportLibrarySamples","updatedAt":"2017-10-02T16:34:34Z","gitUrl":"https:\/\/github.com\/asanchezyu\/AndroidSupportLibrarySamples","license":"Apache License 2.0","forks":1,"stargazersCount":2},{"name":"kstatemachine","language":"Kotlin","description":"State machine written in Kotlin. This library uses DSL syntax and have conditional transitions support.","fullName":"nsk90\/kstatemachine","updatedAt":"2020-11-14T21:15:01Z","gitUrl":"https:\/\/github.com\/nsk90\/kstatemachine","license":"MIT License","forks":0,"stargazersCount":3},{"name":"FiniteFlow","language":"Java","description":"A simple FSM library for Android that supports context-based FSM instances, state \/ transition history, and simple to use builder-pattern constructors with state exit \/ enter event callbacks.","fullName":"zphensley42\/FiniteFlow","updatedAt":"2015-10-26T05:22:56Z","gitUrl":"https:\/\/github.com\/zphensley42\/FiniteFlow","license":null,"forks":1,"stargazersCount":0},{"name":"sidebardrawernav","language":"Java","description":"Sidebar-Drawer-Nav is a library build on Android DrawerLayout Support library as Parent Class, to provide animations, transitions, and custom behavior.  If you are using native navigation drawer component you can easily switch to use Sidebar-Drawer_Nav library by just changing the layout's parent Tags and call the necessary method for animations\/effects.","fullName":"aasif1297\/sidebardrawernav","updatedAt":"2020-03-31T23:24:06Z","gitUrl":"https:\/\/github.com\/aasif1297\/sidebardrawernav","license":"GNU General Public License v3.0","forks":0,"stargazersCount":0},{"name":"PopularMovies","language":"Java","description":"Present users with a grid arrangement of movie posters upon launch. Allow users to change sort order via a setting: The sort order can be by most popular or by highest-rated (movie data fetched from the Internet with the MovieDB API) or by favorite movies (movie data fetched from the local database). Allow users to choose enabling offline use or not via a setting: When enabling offline use is checked, movie posters and movies' basic information will be saved to users' local app cache folder for future offline usage, and will be automatically updated approximately every 24 hours. Created three tables (Movie, Trailer, Review) in one local database. Implemented Content Provider to access the database to fetch favorite movies data. Allow users to tap on a movie poster and transition to a detail screen with additional information such as: original title \/ movie poster image thumbnail \/ a plot synopsis \/ user rating \/ release date \/ trailers \/ reviews. Allow users to view and play trailers via an Intent either to launch in Youtube app or a web browser (if Youtube app isn't installed on the user's phone). Allow users to mark a movie as a favorite in the details view by tapping the star floating action button. Allow users to delete a movie from the favorite movie database by tapping the star button again. Color grey on the star indicates the movie is not stored in the database. To display the details requires an API request. Color yellow on the star indicates the movie is stored in the database (including trailers and reviews). To display the details does not require an API request. Implemented sharing functionality to allow the user to share the first trailer's Youtube URL from the movie details screen. Allow users to interact with the app via a widget: When click the widget title, the app main screen opens directly. When click one of the widget movies' list, the clicked movie detail screen opens directly. Implemented deep links, so that when users go back from one movie's detail screen, it will come back to the app's main screen instead of jumping out of the app directly. Allow users to get a highest-rated popular movie notification every day. Incorporated libraries to simplify the amount of code, such as: Using Picasso to fetch images and load them into views. Using RecyclerView and ConstraintLayouts to implement efficient layout design. Used adapters and viewholders to populate list views. Used databinding to populate details views. Support custom layout-land design to use up white spaces when the phone is rotated to landscape mode. Support different dimensions on Android tablets. Support default language: English and another language: Chinese. Support accessibility for vision-limited users. Stored all the strings in string.xml. Stored all the dimens in dimens.xml. ","fullName":"jinyanliu\/PopularMovies","updatedAt":"2020-06-07T11:12:47Z","gitUrl":"https:\/\/github.com\/jinyanliu\/PopularMovies","license":null,"forks":5,"stargazersCount":6},{"name":"NFL-2015-Schedule-Prediction","language":"Java","description":"developed on the basis that most fans of the NFL predict what their team's record will be at the end of the season. I gave them a way to go through each opponent and decide whether they will win or lose that game. Every fan does it i have done it multiple times every season. Developed for android API 16-21 the UI format uses a drawer layout to display the 32 teams in a listview layout. The user selects the desired team and a fragment transition loads the specific team data from a file packaged with the APK. Each game is presented with a custom button interface that allows a single click to transition from Win \/ Loss. when the user selects a game condition the record will be displayed at the top of the fragment view. The user is given an option to share what he\/she has decided to other users via other apps that take a receive data intent. The application uses the v7 support library(app compact) with newly android lollipop to enhance and give the feel of the material design provided from the new android API 21. ","fullName":"freelanceandroidstudios\/NFL-2015-Schedule-Prediction","updatedAt":"2015-04-28T16:58:17Z","gitUrl":"https:\/\/github.com\/freelanceandroidstudios\/NFL-2015-Schedule-Prediction","license":null,"forks":0,"stargazersCount":1}]}