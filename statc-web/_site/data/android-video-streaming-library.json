{"h1":"Android video streaming  libraries","title":"List of all Android video streaming  libraries for use in your project","meta":"See collection of all Android video streaming  libraries, filter by license, modified date, languages, and select best for your usecase.","repoList":[{"name":"Yuneec-RTSP-Player-Android","language":"Java","description":"Android Library for displaying live video stream from camera.","fullName":"YUNEEC\/Yuneec-RTSP-Player-Android","updatedAt":"2020-04-13T17:28:29Z","gitUrl":"https:\/\/github.com\/YUNEEC\/Yuneec-RTSP-Player-Android","license":"BSD 3-Clause \"New\" or \"Revised\" License","forks":12,"stargazersCount":19},{"name":"VideoDownloadAndPlay","language":"Java","description":"Android Library to play video while downloading, with same data stream. No double data cost.","fullName":"chandilsachin\/VideoDownloadAndPlay","updatedAt":"2019-11-10T18:28:29Z","gitUrl":"https:\/\/github.com\/chandilsachin\/VideoDownloadAndPlay","license":"Apache License 2.0","forks":6,"stargazersCount":14},{"name":"amplify-video-android","language":"Java","description":"\ud83d\udcf2 Android frontend library for Amplify Video, a category plug-in for AWS Amplify that makes it easy to deploy live and file-based streaming video services.","fullName":"alextyner\/amplify-video-android","updatedAt":"2020-11-20T02:49:49Z","gitUrl":"https:\/\/github.com\/alextyner\/amplify-video-android","license":"Apache License 2.0","forks":0,"stargazersCount":2},{"name":"VideoPlayFromURL","language":"Java","description":"Streaming video from URL using easyvideoplayer library","fullName":"NoorMohammedAnik\/VideoPlayFromURL","updatedAt":"2018-06-11T11:45:47Z","gitUrl":"https:\/\/github.com\/NoorMohammedAnik\/VideoPlayFromURL","license":null,"forks":0,"stargazersCount":0},{"name":"AndroidLiveStreamer","language":"Java","description":"A Live Video Streaming Library on Android Devices","fullName":"behin\/AndroidLiveStreamer","updatedAt":"2017-02-23T16:06:18Z","gitUrl":"https:\/\/github.com\/behin\/AndroidLiveStreamer","license":"MIT License","forks":0,"stargazersCount":0},{"name":"video-streaming-exoplayer-kotlin","language":"Kotlin","description":"Android Video Player using ExoPlayer library Sample project (Hammad Tariq Assignment)","fullName":"hammad-tariq\/video-streaming-exoplayer-kotlin","updatedAt":"2018-07-22T10:18:35Z","gitUrl":"https:\/\/github.com\/hammad-tariq\/video-streaming-exoplayer-kotlin","license":null,"forks":3,"stargazersCount":1},{"name":"YTStream","language":"Kotlin","description":"Android library for extracting YouTube video streaming URLs.","fullName":"nvvi9\/YTStream","updatedAt":"2020-10-01T09:03:06Z","gitUrl":"https:\/\/github.com\/nvvi9\/YTStream","license":"GNU General Public License v3.0","forks":0,"stargazersCount":0},{"name":"Android-Ffmpeg-Internal-Support-Library","language":"Java","description":"FFmpeg is a free and open-source project consisting of a vast software suite of libraries and programs for handling video, audio, and other multimedia files and streams","fullName":"vangiex\/Android-Ffmpeg-Internal-Support-Library","updatedAt":"2020-08-14T10:58:11Z","gitUrl":"https:\/\/github.com\/vangiex\/Android-Ffmpeg-Internal-Support-Library","license":"GNU General Public License v3.0","forks":1,"stargazersCount":0},{"name":"HLSPlayer","language":"Java","description":"In this project I implemented an Android application that will play files \u201cm3u8\u201d and \u201cts\u201d in streaming using HLS protocol. On one hand, we designed a browser to search the files that were stored in the local server of the lab, and on the other hand, we developed a video player using Vitamio\u2019s library. The app had to download a  file, which had to be parsed to adapt  the  bandwidth to the download speed and the quality of the video. ","fullName":"gerardcastell\/HLSPlayer","updatedAt":"2020-08-26T06:17:15Z","gitUrl":"https:\/\/github.com\/gerardcastell\/HLSPlayer","license":null,"forks":2,"stargazersCount":6},{"name":"ros-android-rosjava-imagetransport-aumented-reality","language":"Java","description":"This was done as a partial fullfillment to the final year project module. We take in a image stream from image_rect ros node which publishes a video stream from a overhead camera. Robots and markers are on the arena. Markers are identified and published alongside the video using Alvar library. These details are read in ros android application and the video stream is aumented using the received marker details. The user can drag and drop objects in the arena using the robots by publishing commands to the robots very easily using the android app.","fullName":"adhithadias\/ros-android-rosjava-imagetransport-aumented-reality","updatedAt":"2020-04-13T07:33:26Z","gitUrl":"https:\/\/github.com\/adhithadias\/ros-android-rosjava-imagetransport-aumented-reality","license":null,"forks":0,"stargazersCount":3},{"name":"Yuneec-RTSP-Player-Android","language":"Java","description":"Android Library for displaying live video stream from camera.","fullName":"YUNEEC\/Yuneec-RTSP-Player-Android","updatedAt":"2020-04-13T17:28:29Z","gitUrl":"https:\/\/github.com\/YUNEEC\/Yuneec-RTSP-Player-Android","license":"BSD 3-Clause \"New\" or \"Revised\" License","forks":12,"stargazersCount":19},{"name":"VideoDownloadAndPlay","language":"Java","description":"Android Library to play video while downloading, with same data stream. No double data cost.","fullName":"chandilsachin\/VideoDownloadAndPlay","updatedAt":"2019-11-10T18:28:29Z","gitUrl":"https:\/\/github.com\/chandilsachin\/VideoDownloadAndPlay","license":"Apache License 2.0","forks":6,"stargazersCount":14},{"name":"amplify-video-android","language":"Java","description":"\ud83d\udcf2 Android frontend library for Amplify Video, a category plug-in for AWS Amplify that makes it easy to deploy live and file-based streaming video services.","fullName":"alextyner\/amplify-video-android","updatedAt":"2020-11-20T02:49:49Z","gitUrl":"https:\/\/github.com\/alextyner\/amplify-video-android","license":"Apache License 2.0","forks":0,"stargazersCount":2},{"name":"VideoPlayFromURL","language":"Java","description":"Streaming video from URL using easyvideoplayer library","fullName":"NoorMohammedAnik\/VideoPlayFromURL","updatedAt":"2018-06-11T11:45:47Z","gitUrl":"https:\/\/github.com\/NoorMohammedAnik\/VideoPlayFromURL","license":null,"forks":0,"stargazersCount":0},{"name":"AndroidLiveStreamer","language":"Java","description":"A Live Video Streaming Library on Android Devices","fullName":"behin\/AndroidLiveStreamer","updatedAt":"2017-02-23T16:06:18Z","gitUrl":"https:\/\/github.com\/behin\/AndroidLiveStreamer","license":"MIT License","forks":0,"stargazersCount":0},{"name":"video-streaming-exoplayer-kotlin","language":"Kotlin","description":"Android Video Player using ExoPlayer library Sample project (Hammad Tariq Assignment)","fullName":"hammad-tariq\/video-streaming-exoplayer-kotlin","updatedAt":"2018-07-22T10:18:35Z","gitUrl":"https:\/\/github.com\/hammad-tariq\/video-streaming-exoplayer-kotlin","license":null,"forks":3,"stargazersCount":1},{"name":"YTStream","language":"Kotlin","description":"Android library for extracting YouTube video streaming URLs.","fullName":"nvvi9\/YTStream","updatedAt":"2020-10-01T09:03:06Z","gitUrl":"https:\/\/github.com\/nvvi9\/YTStream","license":"GNU General Public License v3.0","forks":0,"stargazersCount":0},{"name":"Android-Ffmpeg-Internal-Support-Library","language":"Java","description":"FFmpeg is a free and open-source project consisting of a vast software suite of libraries and programs for handling video, audio, and other multimedia files and streams","fullName":"vangiex\/Android-Ffmpeg-Internal-Support-Library","updatedAt":"2020-08-14T10:58:11Z","gitUrl":"https:\/\/github.com\/vangiex\/Android-Ffmpeg-Internal-Support-Library","license":"GNU General Public License v3.0","forks":1,"stargazersCount":0},{"name":"HLSPlayer","language":"Java","description":"In this project I implemented an Android application that will play files \u201cm3u8\u201d and \u201cts\u201d in streaming using HLS protocol. On one hand, we designed a browser to search the files that were stored in the local server of the lab, and on the other hand, we developed a video player using Vitamio\u2019s library. The app had to download a  file, which had to be parsed to adapt  the  bandwidth to the download speed and the quality of the video. ","fullName":"gerardcastell\/HLSPlayer","updatedAt":"2020-08-26T06:17:15Z","gitUrl":"https:\/\/github.com\/gerardcastell\/HLSPlayer","license":null,"forks":2,"stargazersCount":6},{"name":"ros-android-rosjava-imagetransport-aumented-reality","language":"Java","description":"This was done as a partial fullfillment to the final year project module. We take in a image stream from image_rect ros node which publishes a video stream from a overhead camera. Robots and markers are on the arena. Markers are identified and published alongside the video using Alvar library. These details are read in ros android application and the video stream is aumented using the received marker details. The user can drag and drop objects in the arena using the robots by publishing commands to the robots very easily using the android app.","fullName":"adhithadias\/ros-android-rosjava-imagetransport-aumented-reality","updatedAt":"2020-04-13T07:33:26Z","gitUrl":"https:\/\/github.com\/adhithadias\/ros-android-rosjava-imagetransport-aumented-reality","license":null,"forks":0,"stargazersCount":3}]}