{"h1":"Android design  28 libraries","title":"List of all Android design  28 libraries for use in your project","meta":"See collection of all Android design  28 libraries, filter by license, modified date, languages, and select best for your usecase.","repoList":[{"name":"DesignSupportLibraryDemoV28","language":"Kotlin","description":null,"fullName":"ManokarG\/DesignSupportLibraryDemoV28","updatedAt":"2018-05-27T16:07:20Z","gitUrl":"https:\/\/github.com\/ManokarG\/DesignSupportLibraryDemoV28","license":null,"forks":0,"stargazersCount":0},{"name":"Support-Library-v28-Additions","language":"Kotlin","description":"At this repository shows at the new components which have been made to the Android Design Support Library Additions with version 28","fullName":"emretekin\/Support-Library-v28-Additions","updatedAt":"2019-03-17T23:53:12Z","gitUrl":"https:\/\/github.com\/emretekin\/Support-Library-v28-Additions","license":null,"forks":0,"stargazersCount":0},{"name":"Custom-Fonts-as-Resources-in-Android-Studio","language":"Java","description":"In this tutorial, we will learn how to add custom fonts as resources into our Android Studio project. Unlike downloadable fonts, these local fonts are bundled with the APK and always available offline. We will also learn how we can bundle multiple fonts together into one font-family XML file, where we can specify a fontStyle and fontWeight for each font file, and let the system apply it to a TextView automatically in accordance to its textStyle (italic or bold). By adding the fontFamily attribute to the AppTheme instead of a single TextView, we can apply a font application-wide, and by using it on a Toolbar theme, we can change the font of the Toolbar specifically. We can also change the font of a TextView dynamically in Java code, by creating a Typeface object with getResources().getFont() or the ResourcesCompat compatibility version, and applying this Typeface to a TextView with setTypeface. Custom fonts are backward compatible down to API level 16 over the AppCompat support library. On API 28 and higher, we can specify the font weight directly over the Typeface.create method or the textFontWeight XML attribute. Supported font resources are ttf and otf files. We can access the free Google Fonts library directly over the Android Studio Design Editor.","fullName":"sumon953\/Custom-Fonts-as-Resources-in-Android-Studio","updatedAt":"2020-07-02T07:20:55Z","gitUrl":"https:\/\/github.com\/sumon953\/Custom-Fonts-as-Resources-in-Android-Studio","license":null,"forks":1,"stargazersCount":1}]}