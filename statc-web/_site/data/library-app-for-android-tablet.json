{"h1":"Android app for  tablet libraries","title":"List of all Android app for  tablet libraries for use in your project","meta":"See collection of all Android app for  tablet libraries, filter by license, modified date, languages, and select best for your usecase.","repoList":[{"name":"JamendoX3","language":"Java","description":"A Jamendo tablet app for Android, including a library for accessing the Jamendo V3 API","fullName":"Lusito\/JamendoX3","updatedAt":"2019-06-12T15:39:10Z","gitUrl":"https:\/\/github.com\/Lusito\/JamendoX3","license":"zlib License","forks":1,"stargazersCount":1},{"name":"BakingApp","language":"Java","description":"Android Baking App for sharing specific recipes with the world. User is allowed to select a recipe and see video-guided steps for how to complete it.   Main parts: -Exoplayer is used to display videos.   -Widget is added for user app experience.  -Third-party libraries Retrofit and GSON are used.  -Fragments are used to create a responsive design that works on phones and tablets.","fullName":"GeorgeKorovesis\/BakingApp","updatedAt":"2018-02-06T22:14:49Z","gitUrl":"https:\/\/github.com\/GeorgeKorovesis\/BakingApp","license":null,"forks":0,"stargazersCount":0},{"name":"BakingApp","language":"Java","description":"Android Baking App is the project related to Android Developer Udacity Nanodegree program. App allows a user to select a recipe and see video-guided steps for how to complete it. The project covered such topics as: * Using MediaPlayer\/Exoplayer to display videos. * Handling error cases in Android. * Adding a widget to the app experience. * Leveraging a third-party library in the app. * Using Fragments to create a responsive design that works on phones and tablets.","fullName":"nbdinara\/BakingApp","updatedAt":"2019-12-12T23:17:22Z","gitUrl":"https:\/\/github.com\/nbdinara\/BakingApp","license":null,"forks":0,"stargazersCount":0},{"name":"my-place","language":"Java","description":"An app suggesting and directing the user to places of interest near his location. Developed for mobile and tablet on Android Studio. Some of technologies, tools and libraries in use: Fragments, SQLite, RecyclerView, Google Maps API, Services.","fullName":"yaelfish\/my-place","updatedAt":"2017-05-18T08:08:41Z","gitUrl":"https:\/\/github.com\/yaelfish\/my-place","license":null,"forks":0,"stargazersCount":0},{"name":"BakeWithMe","language":"Java","description":"Project Overview You will productionize an app, taking it from a functional state to a production-ready state. This will involve finding and handling error cases, adding accessibility features, allowing for localization, adding a widget, and adding a library.  Why this Project? As a working Android developer, you often have to create and implement apps where you are responsible for designing and planning the steps you need to take to create a production-ready app. Unlike Popular Movies where we gave you an implementation guide, it will be up to you to figure things out for the Baking App.  What Will I Learn? In this project you will:  Use MediaPlayer\/Exoplayer to display videos. Handle error cases in Android. Add a widget to your app experience. Leverage a third-party library in your app. Use Fragments to create a responsive design that works on phones and tablets.","fullName":"japjots3198\/BakeWithMe","updatedAt":"2019-03-26T10:46:29Z","gitUrl":"https:\/\/github.com\/japjots3198\/BakeWithMe","license":null,"forks":0,"stargazersCount":0},{"name":"PopularMovies","language":"Java","description":"Present users with a grid arrangement of movie posters upon launch. Allow users to change sort order via a setting: The sort order can be by most popular or by highest-rated (movie data fetched from the Internet with the MovieDB API) or by favorite movies (movie data fetched from the local database). Allow users to choose enabling offline use or not via a setting: When enabling offline use is checked, movie posters and movies' basic information will be saved to users' local app cache folder for future offline usage, and will be automatically updated approximately every 24 hours. Created three tables (Movie, Trailer, Review) in one local database. Implemented Content Provider to access the database to fetch favorite movies data. Allow users to tap on a movie poster and transition to a detail screen with additional information such as: original title \/ movie poster image thumbnail \/ a plot synopsis \/ user rating \/ release date \/ trailers \/ reviews. Allow users to view and play trailers via an Intent either to launch in Youtube app or a web browser (if Youtube app isn't installed on the user's phone). Allow users to mark a movie as a favorite in the details view by tapping the star floating action button. Allow users to delete a movie from the favorite movie database by tapping the star button again. Color grey on the star indicates the movie is not stored in the database. To display the details requires an API request. Color yellow on the star indicates the movie is stored in the database (including trailers and reviews). To display the details does not require an API request. Implemented sharing functionality to allow the user to share the first trailer's Youtube URL from the movie details screen. Allow users to interact with the app via a widget: When click the widget title, the app main screen opens directly. When click one of the widget movies' list, the clicked movie detail screen opens directly. Implemented deep links, so that when users go back from one movie's detail screen, it will come back to the app's main screen instead of jumping out of the app directly. Allow users to get a highest-rated popular movie notification every day. Incorporated libraries to simplify the amount of code, such as: Using Picasso to fetch images and load them into views. Using RecyclerView and ConstraintLayouts to implement efficient layout design. Used adapters and viewholders to populate list views. Used databinding to populate details views. Support custom layout-land design to use up white spaces when the phone is rotated to landscape mode. Support different dimensions on Android tablets. Support default language: English and another language: Chinese. Support accessibility for vision-limited users. Stored all the strings in string.xml. Stored all the dimens in dimens.xml. ","fullName":"jinyanliu\/PopularMovies","updatedAt":"2020-06-07T11:12:47Z","gitUrl":"https:\/\/github.com\/jinyanliu\/PopularMovies","license":null,"forks":5,"stargazersCount":6},{"name":"LibAccessSw","language":"Java","description":"LibAccessSw is an android app originally developed to maintain small scale libraries for schools in India. The most advantageous features of my program are twofold. First is the ability for the user to digitally browse through the collection of books by category. This solves for the current challenge of having to manually browse through stacks of unorganized books literally crammed into a shelf. Second is the search by name method. The ability to quickly search for the availability of a specific book greatly increases efficiency as well as ease of use.  Current methods for maintaining small scale libraries involve a paper and a pen. This requires the collection of books to be kept locked at all times, until designated periods of allowed usage. The seemingly modest task of checking out and returning books becomes time consuming and tedious. Furthermore, the current method is prone to theft and extended periods of delay between checkout and checkin. As of now, we have deployed the LibAccessSw on multiple tablets to different schools in India.","fullName":"smudide\/LibAccessSw","updatedAt":"2017-09-28T15:19:29Z","gitUrl":"https:\/\/github.com\/smudide\/LibAccessSw","license":null,"forks":0,"stargazersCount":0}]}