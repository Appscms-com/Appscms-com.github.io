{"h1":"Androidhow to add  project in  studio libraries","title":"List of all Androidhow to add  project in  studio libraries for use in your project","meta":"See collection of all Androidhow to add  project in  studio libraries, filter by license, modified date, languages, and select best for your usecase.","repoList":[{"name":"Custom-Fonts-as-Resources-in-Android-Studio","language":"Java","description":"In this tutorial, we will learn how to add custom fonts as resources into our Android Studio project. Unlike downloadable fonts, these local fonts are bundled with the APK and always available offline. We will also learn how we can bundle multiple fonts together into one font-family XML file, where we can specify a fontStyle and fontWeight for each font file, and let the system apply it to a TextView automatically in accordance to its textStyle (italic or bold). By adding the fontFamily attribute to the AppTheme instead of a single TextView, we can apply a font application-wide, and by using it on a Toolbar theme, we can change the font of the Toolbar specifically. We can also change the font of a TextView dynamically in Java code, by creating a Typeface object with getResources().getFont() or the ResourcesCompat compatibility version, and applying this Typeface to a TextView with setTypeface. Custom fonts are backward compatible down to API level 16 over the AppCompat support library. On API 28 and higher, we can specify the font weight directly over the Typeface.create method or the textFontWeight XML attribute. Supported font resources are ttf and otf files. We can access the free Google Fonts library directly over the Android Studio Design Editor.","fullName":"sumon953\/Custom-Fonts-as-Resources-in-Android-Studio","updatedAt":"2020-07-02T07:20:55Z","gitUrl":"https:\/\/github.com\/sumon953\/Custom-Fonts-as-Resources-in-Android-Studio","license":null,"forks":1,"stargazersCount":1},{"name":"Save-and-get-data-local-data-using-room-database-android-studio","language":"Java","description":"Room persistence library allows you to perform, create, read, update, and delete operations the same way you would in SQLite API easily. This Room allows fluent database access while harnessing the full power of SQLite and helps you create a cache of your app\u2019s data on a device that\u2019s running your app. There are three major components in Room that are Database, Entity, and DAO. Watch the tutorial to learn how to implement your local database in Android Studio using the Room persistence library. Follow the steps to know How to Save and get Data local data using Room Database in the android studio:- 1. Create a New android studio project and add Room Database library to your project. 2. Now create a new Java file called User.java and Add the import declaration. 3. Creating a very simple table that consists of UID, Name, and Timestamp. 4. Add the variables like primary key, auto-generate, and column info. 5. Create another file called UserDao.java. Change the class into an interface and add and run the code. 6. Now Create a new file called AppDatabase.java and add the import declaration. 7. Now Create a variable as an instance and initialize the ExecutorService with the number of threads. 8. Create a static function that returns the instance and add the databaseBuilder statement to initialize the database. 9. Now Inside the MainActivity class and get the singleton instance of AppDatabase and call the appropriate functions. 10. Now call the execute function and pass a Runnable object.","fullName":"gameappstudio-official\/Save-and-get-data-local-data-using-room-database-android-studio","updatedAt":"2020-10-20T01:34:36Z","gitUrl":"https:\/\/github.com\/gameappstudio-official\/Save-and-get-data-local-data-using-room-database-android-studio","license":null,"forks":0,"stargazersCount":0}]}