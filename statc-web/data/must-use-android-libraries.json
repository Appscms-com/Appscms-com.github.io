{"h1":"Androidmust use  libraries libraries","title":"List of all Androidmust use  libraries libraries for use in your project","meta":"See collection of all Androidmust use  libraries libraries, filter by license, modified date, languages, and select best for your usecase.","repoList":[{"name":"android-msdk","language":"Kotlin","description":"This library allows you to embed payment acceptance using \"Click\" into Android mobile applications. For the library to function properly, the user must be connected to Click Merchant using the Shop API scheme","fullName":"click-llc\/android-msdk","updatedAt":"2020-11-10T13:56:03Z","gitUrl":"https:\/\/github.com\/click-llc\/android-msdk","license":null,"forks":3,"stargazersCount":13},{"name":"Otter-Library-System_android_app","language":"Java","description":"In this project, you will develop an Android app for the Otter Library System, a book reservation system for a library. You can see the detailed use case model in the Project 2 (Part 2) assignment description on iLearn. For the project, you must develop an Android app using Android Studio.","fullName":"philemmons\/Otter-Library-System_android_app","updatedAt":"2018-06-11T23:58:16Z","gitUrl":"https:\/\/github.com\/philemmons\/Otter-Library-System_android_app","license":null,"forks":0,"stargazersCount":0},{"name":"alifbo","language":"Java","description":"This is Alifbo, an Android application that allows users to save notes, todo lists and web pages. It is developed in Android Studio, and to use the project, all the libraries that have been used for the project must be included, and the table names, attributes and database connection info on PHP files must match your database and server.","fullName":"dalerrustamov\/alifbo","updatedAt":"2018-07-01T19:31:45Z","gitUrl":"https:\/\/github.com\/dalerrustamov\/alifbo","license":null,"forks":1,"stargazersCount":0},{"name":"ExternalDaggerComponent","language":"Kotlin","description":"A sample how Dagger component could be used as an interface of another dagger component located in a different android module (library). Why? For example, it could be useful if you develop a SDK required a network, but the network must be implemented and provided by the app.","fullName":"andronmobi\/ExternalDaggerComponent","updatedAt":"2020-06-21T12:31:40Z","gitUrl":"https:\/\/github.com\/andronmobi\/ExternalDaggerComponent","license":null,"forks":0,"stargazersCount":0},{"name":"Udacity_MovieApp","language":"Java","description":"Project Overview Project Overview  Most of us can relate to kicking back on the couch and enjoying a movie with friends and family. In this project, you\u2019ll build an app to allow users to discover the most popular movies playing. We will split the development of this app in two stages. First, let's talk about stage 1. In this stage you\u2019ll build the core experience of your movies app.  You app will:  Present the user with a grid arrangement of movie posters upon launch. Allow your user to change sort order via a setting: The sort order can be by most popular or by highest-rated Allow the user to tap on a movie poster and transition to a details screen with additional information such as: original title movie poster image thumbnail A plot synopsis (called overview in the api) user rating (called vote_average in the api) release date Why this Project?  To become an Android developer, you must know how to bring particular mobile experiences to life. Specifically, you need to know how to build clean and compelling user interfaces (UIs), fetch data from network services, and optimize the experience for various mobile devices. You will hone these fundamental skills in this project.  By building this app, you will demonstrate your understanding of the foundational elements of programming for Android. Your app will communicate with the Internet and provide a responsive and delightful user experience.  What Will I Learn After Stage 1?  You will fetch data from the Internet with theMovieDB API. You will use adapters and custom list layouts to populate list views. You will incorporate libraries to simplify the amount of code you need to write Ready to start building? ","fullName":"eriDam\/Udacity_MovieApp","updatedAt":"2017-03-10T13:55:50Z","gitUrl":"https:\/\/github.com\/eriDam\/Udacity_MovieApp","license":null,"forks":0,"stargazersCount":2},{"name":"UrsviksInventory","language":"Java","description":"Allow Ursviks small store to keep track of its inventory of products by storing products information in a SQLite Database, including picture, name, price, supplier email and current quantity of products.  Implemented ContentProvider to read(query), create(insert), update and delete all products' information from the database.  Implemented CursorAdapter to display all products' information in the ListView of main screen. Add one product information by clicking the ADD button at the bottom of the main screen. Add or change product's picture by taking photo or choosing from library.  Implemented Runtime Permission Handling for Android 6.0+ and Android API 23+. Also implemented Permission Handling for early versions of Android.  Type in product's name, price, supplier email and current quantity.  Implemented Option Menu both in Main screen and Edit Screen. Implemented sanity check: If picture is empty, the ImageView on the single item view is invisible. Name, price and current quantity cannot be empty. Supplier email must be valid if provided. Numbers cannot be negative. Otherwise a Toast message will be displayed.  Click each product item in the ListView of main screen to edit this product's information.  Toast message shows at the bottom to indicate user whether the saving or updating product information is successful or not.  Track products' current quantities by tracking the number of sale products or receive products. Click the SALE button on each single item view to track the sale of one product and store the current quantity into the database. In the edit view, type in sale quantity or receive quantity to track large amount sale or receive.  Toast message shows at the bottom if there are not enough products for sale.  Click Order button in the edit mode to open the Email App to send an order email to the product's supplier using product's information in the database.  Ask user confirmation before deleting a product's or all products' information.  Warn user about losing unsaved changes.  An empty state is implemented when there is no products' information in the database. Also show a message in the empty view to instruct user how to start adding a product's information into the database. ","fullName":"jinyanliu\/UrsviksInventory","updatedAt":"2017-02-25T20:01:09Z","gitUrl":"https:\/\/github.com\/jinyanliu\/UrsviksInventory","license":null,"forks":2,"stargazersCount":1}]}