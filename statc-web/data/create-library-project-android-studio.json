{"h1":"Androidcreate  project  studio libraries","title":"List of all Androidcreate  project  studio libraries for use in your project","meta":"See collection of all Androidcreate  project  studio libraries, filter by license, modified date, languages, and select best for your usecase.","repoList":[{"name":"Android-Project-App-Image-Saver","language":"Java","description":"I created a custom image library app using Android Studio. ","fullName":"Tasswon\/Android-Project-App-Image-Saver","updatedAt":"2020-11-16T03:14:33Z","gitUrl":"https:\/\/github.com\/Tasswon\/Android-Project-App-Image-Saver","license":null,"forks":0,"stargazersCount":1},{"name":"MiniAndroidProjects","language":"Java","description":"Projects Ranging from Music player , Sqlite to authentication with custom and google accounts. These accounts have been created using Android Studio , music library , battery manager, firebase, and cellmanager.","fullName":"adriel1997\/MiniAndroidProjects","updatedAt":"2018-05-18T06:12:53Z","gitUrl":"https:\/\/github.com\/adriel1997\/MiniAndroidProjects","license":null,"forks":0,"stargazersCount":0},{"name":"MoviesProject","language":"Kotlin","description":"This repository was created to show the use of MVP + Klotin + Retrofit 2 in Android Studio. Simple movie application with nice UI. To see the use of Paging Library move to the branch \"architecture-components\"","fullName":"jjrodcast\/MoviesProject","updatedAt":"2018-08-31T01:17:28Z","gitUrl":"https:\/\/github.com\/jjrodcast\/MoviesProject","license":"MIT License","forks":0,"stargazersCount":2},{"name":"BloombergProjectFinal","language":"Java","description":"I created an Android mobile application to see graphical representation of inputted data. Also included stopwatch and speed tracker. Utilized Android Studio and library from Central Maven Repository.","fullName":"SruthiSudhakar\/BloombergProjectFinal","updatedAt":"2018-03-27T20:50:38Z","gitUrl":"https:\/\/github.com\/SruthiSudhakar\/BloombergProjectFinal","license":null,"forks":0,"stargazersCount":0},{"name":"mycling","language":"Java","description":"This Project is created from Cling Github library file converted to Graddle project for Android Studio use","fullName":"dionguek\/mycling","updatedAt":"2017-03-17T04:10:23Z","gitUrl":"https:\/\/github.com\/dionguek\/mycling","license":null,"forks":0,"stargazersCount":0},{"name":"Custom-Fonts-as-Resources-in-Android-Studio","language":"Java","description":"In this tutorial, we will learn how to add custom fonts as resources into our Android Studio project. Unlike downloadable fonts, these local fonts are bundled with the APK and always available offline. We will also learn how we can bundle multiple fonts together into one font-family XML file, where we can specify a fontStyle and fontWeight for each font file, and let the system apply it to a TextView automatically in accordance to its textStyle (italic or bold). By adding the fontFamily attribute to the AppTheme instead of a single TextView, we can apply a font application-wide, and by using it on a Toolbar theme, we can change the font of the Toolbar specifically. We can also change the font of a TextView dynamically in Java code, by creating a Typeface object with getResources().getFont() or the ResourcesCompat compatibility version, and applying this Typeface to a TextView with setTypeface. Custom fonts are backward compatible down to API level 16 over the AppCompat support library. On API 28 and higher, we can specify the font weight directly over the Typeface.create method or the textFontWeight XML attribute. Supported font resources are ttf and otf files. We can access the free Google Fonts library directly over the Android Studio Design Editor.","fullName":"sumon953\/Custom-Fonts-as-Resources-in-Android-Studio","updatedAt":"2020-07-02T07:20:55Z","gitUrl":"https:\/\/github.com\/sumon953\/Custom-Fonts-as-Resources-in-Android-Studio","license":null,"forks":1,"stargazersCount":1},{"name":"SimpleAndroidGameFramework","language":"Java","description":"Android Studio library project to provide a simple game framework, loosely based on Scratch model. It is intended to be used as a tool to create simple games, and to help to learn how to write graphical apps.","fullName":"pbosman\/SimpleAndroidGameFramework","updatedAt":"2015-01-16T23:27:42Z","gitUrl":"https:\/\/github.com\/pbosman\/SimpleAndroidGameFramework","license":null,"forks":0,"stargazersCount":0},{"name":"Save-and-get-data-local-data-using-room-database-android-studio","language":"Java","description":"Room persistence library allows you to perform, create, read, update, and delete operations the same way you would in SQLite API easily. This Room allows fluent database access while harnessing the full power of SQLite and helps you create a cache of your app\u2019s data on a device that\u2019s running your app. There are three major components in Room that are Database, Entity, and DAO. Watch the tutorial to learn how to implement your local database in Android Studio using the Room persistence library. Follow the steps to know How to Save and get Data local data using Room Database in the android studio:- 1. Create a New android studio project and add Room Database library to your project. 2. Now create a new Java file called User.java and Add the import declaration. 3. Creating a very simple table that consists of UID, Name, and Timestamp. 4. Add the variables like primary key, auto-generate, and column info. 5. Create another file called UserDao.java. Change the class into an interface and add and run the code. 6. Now Create a new file called AppDatabase.java and add the import declaration. 7. Now Create a variable as an instance and initialize the ExecutorService with the number of threads. 8. Create a static function that returns the instance and add the databaseBuilder statement to initialize the database. 9. Now Inside the MainActivity class and get the singleton instance of AppDatabase and call the appropriate functions. 10. Now call the execute function and pass a Runnable object.","fullName":"gameappstudio-official\/Save-and-get-data-local-data-using-room-database-android-studio","updatedAt":"2020-10-20T01:34:36Z","gitUrl":"https:\/\/github.com\/gameappstudio-official\/Save-and-get-data-local-data-using-room-database-android-studio","license":null,"forks":0,"stargazersCount":0},{"name":"finalProject","language":"Java","description":"1. Generally, StudentMarks is a mobile application that created for lecturer to easily update their students marks and other details. This application was developed using android studio and SQLite as the database to store the data key in by the lectures.  2. This application have several functionality like ADD, DELETE, MODIFY, VIEW  and VIEW ALL or list.  - ADD  First, lecturer can use add function to add the student's data.   -DELETE If there is any unused data in database, user can delete it by enter the metric number and choose delete button.  -MODIFY  As the data was added incorrectly, the user can modify and update the new data that originally stored in that database.  -VIEW  In order to search any details of certain student, user can use the this function as they need to enter the metric number and touch the view button, the student name and marks will be automated viewed on the screen.  -VIEW ALL User can list out all the student's data that already stored in database.  3. Setup the development environment  Firstly, this StudentMark Application were build using Android Studio with the SDK Platform Android 8.1 (Oreo) with the API level 27, the SDK developer tools involved are Android SDK Build-Tools -rc2, Android Emulator version 27.1.10, Android SDK Platform -Tools, Android SDK Tools, Intel x86 Emulator Accelerator and Support Repository which contain Constraint Layout for Android, Solve for ConstraintLayout, Android Support Repository and Google Repository.  For the require library involved are :- apache-httpcomponents-httclient.jar , apache-httpcomponents-httpcore.jar , commons-logging-1.2.jar java-json.jar ","fullName":"Nurtiq\/finalProject","updatedAt":"2020-08-06T09:25:11Z","gitUrl":"https:\/\/github.com\/Nurtiq\/finalProject","license":null,"forks":1,"stargazersCount":2},{"name":"Android-RoomLiveDataTutorial","language":"Java","description":"This is the simplest Kotlin Android Studio project with :  1- ROOM persistence library for creating a SQL Lite database and a simple User table (id, firstName, lastName)  2- LiveData example with a simple Observer  When a new record is inserted in the User table, that triggers the Observer and the number of records are added to the Edit Text area.","fullName":"reuniware\/Android-RoomLiveDataTutorial","updatedAt":"2019-02-08T09:52:04Z","gitUrl":"https:\/\/github.com\/reuniware\/Android-RoomLiveDataTutorial","license":null,"forks":0,"stargazersCount":1},{"name":"Android-Project-App-Image-Saver","language":"Java","description":"I created a custom image library app using Android Studio. ","fullName":"Tasswon\/Android-Project-App-Image-Saver","updatedAt":"2020-11-16T03:14:33Z","gitUrl":"https:\/\/github.com\/Tasswon\/Android-Project-App-Image-Saver","license":null,"forks":0,"stargazersCount":1},{"name":"MiniAndroidProjects","language":"Java","description":"Projects Ranging from Music player , Sqlite to authentication with custom and google accounts. These accounts have been created using Android Studio , music library , battery manager, firebase, and cellmanager.","fullName":"adriel1997\/MiniAndroidProjects","updatedAt":"2018-05-18T06:12:53Z","gitUrl":"https:\/\/github.com\/adriel1997\/MiniAndroidProjects","license":null,"forks":0,"stargazersCount":0},{"name":"MoviesProject","language":"Kotlin","description":"This repository was created to show the use of MVP + Klotin + Retrofit 2 in Android Studio. Simple movie application with nice UI. To see the use of Paging Library move to the branch \"architecture-components\"","fullName":"jjrodcast\/MoviesProject","updatedAt":"2018-08-31T01:17:28Z","gitUrl":"https:\/\/github.com\/jjrodcast\/MoviesProject","license":"MIT License","forks":0,"stargazersCount":2},{"name":"BloombergProjectFinal","language":"Java","description":"I created an Android mobile application to see graphical representation of inputted data. Also included stopwatch and speed tracker. Utilized Android Studio and library from Central Maven Repository.","fullName":"SruthiSudhakar\/BloombergProjectFinal","updatedAt":"2018-03-27T20:50:38Z","gitUrl":"https:\/\/github.com\/SruthiSudhakar\/BloombergProjectFinal","license":null,"forks":0,"stargazersCount":0},{"name":"mycling","language":"Java","description":"This Project is created from Cling Github library file converted to Graddle project for Android Studio use","fullName":"dionguek\/mycling","updatedAt":"2017-03-17T04:10:23Z","gitUrl":"https:\/\/github.com\/dionguek\/mycling","license":null,"forks":0,"stargazersCount":0},{"name":"Custom-Fonts-as-Resources-in-Android-Studio","language":"Java","description":"In this tutorial, we will learn how to add custom fonts as resources into our Android Studio project. Unlike downloadable fonts, these local fonts are bundled with the APK and always available offline. We will also learn how we can bundle multiple fonts together into one font-family XML file, where we can specify a fontStyle and fontWeight for each font file, and let the system apply it to a TextView automatically in accordance to its textStyle (italic or bold). By adding the fontFamily attribute to the AppTheme instead of a single TextView, we can apply a font application-wide, and by using it on a Toolbar theme, we can change the font of the Toolbar specifically. We can also change the font of a TextView dynamically in Java code, by creating a Typeface object with getResources().getFont() or the ResourcesCompat compatibility version, and applying this Typeface to a TextView with setTypeface. Custom fonts are backward compatible down to API level 16 over the AppCompat support library. On API 28 and higher, we can specify the font weight directly over the Typeface.create method or the textFontWeight XML attribute. Supported font resources are ttf and otf files. We can access the free Google Fonts library directly over the Android Studio Design Editor.","fullName":"sumon953\/Custom-Fonts-as-Resources-in-Android-Studio","updatedAt":"2020-07-02T07:20:55Z","gitUrl":"https:\/\/github.com\/sumon953\/Custom-Fonts-as-Resources-in-Android-Studio","license":null,"forks":1,"stargazersCount":1},{"name":"SimpleAndroidGameFramework","language":"Java","description":"Android Studio library project to provide a simple game framework, loosely based on Scratch model. It is intended to be used as a tool to create simple games, and to help to learn how to write graphical apps.","fullName":"pbosman\/SimpleAndroidGameFramework","updatedAt":"2015-01-16T23:27:42Z","gitUrl":"https:\/\/github.com\/pbosman\/SimpleAndroidGameFramework","license":null,"forks":0,"stargazersCount":0},{"name":"Save-and-get-data-local-data-using-room-database-android-studio","language":"Java","description":"Room persistence library allows you to perform, create, read, update, and delete operations the same way you would in SQLite API easily. This Room allows fluent database access while harnessing the full power of SQLite and helps you create a cache of your app\u2019s data on a device that\u2019s running your app. There are three major components in Room that are Database, Entity, and DAO. Watch the tutorial to learn how to implement your local database in Android Studio using the Room persistence library. Follow the steps to know How to Save and get Data local data using Room Database in the android studio:- 1. Create a New android studio project and add Room Database library to your project. 2. Now create a new Java file called User.java and Add the import declaration. 3. Creating a very simple table that consists of UID, Name, and Timestamp. 4. Add the variables like primary key, auto-generate, and column info. 5. Create another file called UserDao.java. Change the class into an interface and add and run the code. 6. Now Create a new file called AppDatabase.java and add the import declaration. 7. Now Create a variable as an instance and initialize the ExecutorService with the number of threads. 8. Create a static function that returns the instance and add the databaseBuilder statement to initialize the database. 9. Now Inside the MainActivity class and get the singleton instance of AppDatabase and call the appropriate functions. 10. Now call the execute function and pass a Runnable object.","fullName":"gameappstudio-official\/Save-and-get-data-local-data-using-room-database-android-studio","updatedAt":"2020-10-20T01:34:36Z","gitUrl":"https:\/\/github.com\/gameappstudio-official\/Save-and-get-data-local-data-using-room-database-android-studio","license":null,"forks":0,"stargazersCount":0},{"name":"finalProject","language":"Java","description":"1. Generally, StudentMarks is a mobile application that created for lecturer to easily update their students marks and other details. This application was developed using android studio and SQLite as the database to store the data key in by the lectures.  2. This application have several functionality like ADD, DELETE, MODIFY, VIEW  and VIEW ALL or list.  - ADD  First, lecturer can use add function to add the student's data.   -DELETE If there is any unused data in database, user can delete it by enter the metric number and choose delete button.  -MODIFY  As the data was added incorrectly, the user can modify and update the new data that originally stored in that database.  -VIEW  In order to search any details of certain student, user can use the this function as they need to enter the metric number and touch the view button, the student name and marks will be automated viewed on the screen.  -VIEW ALL User can list out all the student's data that already stored in database.  3. Setup the development environment  Firstly, this StudentMark Application were build using Android Studio with the SDK Platform Android 8.1 (Oreo) with the API level 27, the SDK developer tools involved are Android SDK Build-Tools -rc2, Android Emulator version 27.1.10, Android SDK Platform -Tools, Android SDK Tools, Intel x86 Emulator Accelerator and Support Repository which contain Constraint Layout for Android, Solve for ConstraintLayout, Android Support Repository and Google Repository.  For the require library involved are :- apache-httpcomponents-httclient.jar , apache-httpcomponents-httpcore.jar , commons-logging-1.2.jar java-json.jar ","fullName":"Nurtiq\/finalProject","updatedAt":"2020-08-06T09:25:11Z","gitUrl":"https:\/\/github.com\/Nurtiq\/finalProject","license":null,"forks":1,"stargazersCount":2},{"name":"Android-RoomLiveDataTutorial","language":"Java","description":"This is the simplest Kotlin Android Studio project with :  1- ROOM persistence library for creating a SQL Lite database and a simple User table (id, firstName, lastName)  2- LiveData example with a simple Observer  When a new record is inserted in the User table, that triggers the Observer and the number of records are added to the Edit Text area.","fullName":"reuniware\/Android-RoomLiveDataTutorial","updatedAt":"2019-02-08T09:52:04Z","gitUrl":"https:\/\/github.com\/reuniware\/Android-RoomLiveDataTutorial","license":null,"forks":0,"stargazersCount":1}]}